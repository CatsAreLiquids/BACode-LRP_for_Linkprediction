import torch_sparse
import numpy as np
import torch
import matplotlib.pyplot as plt


def validation_multiplot(lrp, lrp0, random):
    lrp = [0.00000000e+00, 4.59353129e-06, 2.91466713e-05, 5.73726495e-04,
           9.40314929e-04, 9.42093134e-04, 4.04592554e-03, 4.26748196e-03,
           3.88081272e-03, 3.82448634e-03, 7.99915393e-03, 6.28491640e-03,
           9.77093776e-03, 1.81597988e-02, 2.63878624e-02, 3.35769057e-02,
           5.76195200e-02, 8.51722022e-02, 1.01482256e-01, 1.34930112e-01,
           1.47473107e-01, 1.72217645e-01, 2.48140560e-01, 3.41351350e-01,
           5.22471068e-01, 7.53759438e-01, 9.37976696e-01, 9.59948915e-01,
           1.77069798e+00, 2.10846516e+00, 2.04040781e+00, 2.05426682e+00,
           2.15737153e+00, 2.40572458e+00, 2.63816560e+00, 2.77159157e+00,
           2.73570008e+00, 2.80628789e+00, 2.89722615e+00, 3.05594124e+00,
           3.11845720e+00, 3.12659389e+00, 3.12053734e+00, 3.12320076e+00,
           3.13318066e+00, 3.14928189e+00, 3.16311206e+00, 3.33260375e+00,
           3.31179658e+00, 3.29501324e+00, 3.34098961e+00, 3.38273311e+00,
           3.38273311e+00, 3.52988463e+00, 3.52988463e+00, 3.52988463e+00,
           3.71493343e+00]
    lrp0 = [0.00000000e+00, 0.00000000e+00, 2.28484472e-08, 8.81155332e-07,
       2.17556953e-06, 2.88287799e-06, 1.33055647e-03, 2.33261685e-03,
       2.68577635e-03, 4.35544352e-03, 6.46133920e-03, 6.83547755e-03,
       8.24209948e-03, 8.90711546e-03, 1.17853890e-02, 1.10560745e-02,
       1.04054312e-02, 1.18954599e-02, 2.71348059e-02, 3.42950622e-02,
       3.57212861e-02, 3.40758214e-02, 5.28051674e-02, 8.66717041e-02,
       2.72929835e-01, 2.64936825e-01, 3.41687304e-01, 4.09377965e-01,
       7.70606682e-01, 1.09860576e+00, 1.16642028e+00, 1.31890302e+00,
       1.50487548e+00, 1.50590762e+00, 1.57461595e+00, 1.71844984e+00,
       1.68835055e+00, 1.93602226e+00, 2.12202092e+00, 2.15725629e+00,
       2.19951431e+00, 2.20153196e+00, 2.20486157e+00, 2.22360218e+00,
       2.24331071e+00, 2.28478607e+00, 2.26521442e+00, 2.26504130e+00,
       2.26120529e+00, 2.27826127e+00, 2.33760879e+00, 2.57732238e+00,
       2.55131961e+00, 2.67959940e+00, 2.67959940e+00, 2.71305674e+00,
       3.02231949e+00]
    lrp0020 = [0.00000000e+00, 1.66098277e-06, 1.15275383e-05, 1.15593274e-05,
       1.15831693e-05, 2.81373660e-05, 2.90358067e-04, 3.42444579e-04,
       6.41874472e-04, 7.20372796e-04, 1.10149384e-03, 1.45876805e-03,
       3.24105124e-03, 5.28334379e-03, 5.06280164e-03, 5.90034624e-03,
       5.71207404e-03, 7.18891422e-03, 8.87165566e-03, 1.95636084e-02,
       2.53560503e-02, 2.91229089e-02, 4.66845602e-02, 8.57713759e-02,
       1.41926640e-01, 2.99140905e-01, 3.42331955e-01, 5.26791510e-01,
       7.72471214e-01, 1.04170870e+00, 1.13159739e+00, 1.25559815e+00,
       1.46605361e+00, 1.48560359e+00, 1.57980615e+00, 1.69259920e+00,
       1.68728703e+00, 1.93502907e+00, 2.12140170e+00, 2.15640366e+00,
       2.19912067e+00, 2.20030008e+00, 2.20424797e+00, 2.20428283e+00,
       2.21025795e+00, 2.24360562e+00, 2.27898036e+00, 2.26617816e+00,
       2.27009724e+00, 2.28849077e+00, 2.33815159e+00, 2.58260981e+00,
       2.55131961e+00, 2.67959940e+00, 2.67959940e+00, 2.71305674e+00,
       3.02231949e+00]
    lrp020 = [[0.00000000e+00, 7.94728597e-09, 1.69575214e-05, 1.74661477e-05,
               1.75893307e-05, 1.78794066e-05, 1.85231368e-05, 2.43804852e-04,
               3.48232190e-04, 4.02221084e-04, 5.88217378e-04, 8.07562470e-04,
               2.66496638e-03, 3.98999254e-03, 5.36755125e-03, 9.87910032e-03,
               9.20565526e-03, 1.30861481e-02, 1.96605921e-02, 1.43587987e-02,
               1.81397796e-02, 3.05853287e-02, 9.36439703e-02, 1.86341483e-01,
               3.00981305e-01, 3.08432075e-01, 3.55406302e-01, 4.46333401e-01,
               7.34741430e-01, 1.11070160e+00, 1.17578542e+00, 1.33192750e+00,
               1.50696021e+00, 1.51780047e+00, 1.68379651e+00, 1.82726607e+00,
               1.87820880e+00, 2.02588559e+00, 2.19247648e+00, 2.15916345e+00,
               2.20187135e+00, 2.20240492e+00, 2.20369655e+00, 2.23412278e+00,
               2.23543162e+00, 2.21765944e+00, 2.21638582e+00, 2.27892446e+00,
               2.26310838e+00, 2.31395338e+00, 2.39933969e+00, 2.65927286e+00,
               2.66856966e+00, 2.67959940e+00, 2.67959940e+00, 2.71305674e+00,
               3.02231949e+00]]
    lrp050 = [0.00000000e+00, 2.19154358e-04, 2.34679381e-04, 6.29216433e-04,
              7.03173876e-04, 1.11766259e-03, 5.08827567e-03, 5.54429690e-03,
              8.08652639e-03, 7.64008363e-03, 8.90481273e-03, 1.34013355e-02,
              3.14186474e-02, 3.67508868e-02, 4.16976392e-02, 4.74625230e-02,
              3.53417397e-02, 4.86015677e-02, 6.69937948e-02, 1.08495857e-01,
              2.18696384e-01, 2.78550905e-01, 4.48535915e-01, 4.69008358e-01,
              6.18585868e-01, 1.01252174e+00, 1.22570353e+00, 1.29746258e+00,
              1.86244233e+00, 2.17742598e+00, 2.20128541e+00, 2.12575643e+00,
              2.18687240e+00, 2.40613113e+00, 2.88116296e+00, 2.88736582e+00,
              2.85178224e+00, 2.88510010e+00, 2.88535617e+00, 3.03181138e+00,
              3.12749816e+00, 3.13397401e+00, 3.13097882e+00, 3.12660817e+00,
              3.16813165e+00, 3.14367830e+00, 3.17127609e+00, 3.28375778e+00,
              3.38788290e+00, 3.29776645e+00, 3.34485959e+00, 3.44506119e+00,
              3.48210164e+00, 3.53280834e+00, 3.52988463e+00, 3.52988463e+00,
              3.71493343e+00]
    lrp1000 = [0.00000000e+00, 2.42392222e-06, 3.15507253e-06, 5.60565790e-04,
               7.55119324e-04, 1.25581225e-03, 1.60020789e-03, 2.92584697e-03,
               3.97445957e-03, 1.03169163e-02, 1.05328302e-02, 2.32743482e-02,
               2.13703513e-02, 3.95196478e-02, 3.81694416e-02, 4.77258344e-02,
               5.57782034e-02, 6.02752705e-02, 1.17923027e-01, 1.35892524e-01,
               1.58691108e-01, 1.56955798e-01, 2.15714461e-01, 4.08079402e-01,
               5.49797358e-01, 7.20609188e-01, 8.17649136e-01, 1.12728695e+00,
               1.67300328e+00, 1.98224771e+00, 2.03456989e+00, 2.05046044e+00,
               2.17489312e+00, 2.28850204e+00, 2.49875000e+00, 2.78892024e+00,
               2.84825370e+00, 2.81374477e+00, 2.86852100e+00, 3.01991610e+00,
               3.11680387e+00, 3.13211844e+00, 3.11681576e+00, 3.12110183e+00,
               3.13063702e+00, 3.15313261e+00, 3.14899829e+00, 3.26318138e+00,
               3.39293556e+00, 3.30144616e+00, 3.33997692e+00, 3.37528750e+00,
               3.38273311e+00, 3.52988463e+00, 3.52988463e+00, 3.52988463e+00,
               3.71493343e+00]
    lrp10002 = [0.00000000e+00, 1.60376231e-05, 1.72694524e-05, 6.84028864e-04,
                1.39413079e-03, 1.53495272e-03, 1.64047480e-03, 2.73210208e-03,
                4.34085727e-03, 7.80126850e-03, 1.26462619e-02, 1.43589516e-02,
                1.63877666e-02, 5.18493573e-02, 6.12773538e-02, 6.41876539e-02,
                7.63012151e-02, 9.01615083e-02, 1.11738048e-01, 1.23199781e-01,
                1.54945252e-01, 2.14148325e-01, 1.95488793e-01, 3.89520023e-01,
                4.53933066e-01, 7.45387530e-01, 8.42284942e-01, 9.30028816e-01,
                1.51497930e+00, 2.15136835e+00, 2.08008239e+00, 2.08994825e+00,
                2.16517271e+00, 2.26900503e+00, 2.45965008e+00, 2.87465710e+00,
                2.78246544e+00, 2.80854022e+00, 2.86683509e+00, 3.02404923e+00,
                3.11608465e+00, 3.13296182e+00, 3.12094908e+00, 3.12075429e+00,
                3.13256464e+00, 3.15559912e+00, 3.12844323e+00, 3.24287927e+00,
                3.38605744e+00, 3.30144616e+00, 3.34742253e+00, 3.38273311e+00,
                3.37980940e+00, 3.52988463e+00, 3.52988463e+00, 3.52988463e+00,
                3.71493343e+00]
    lrp0202 = [0.00000000e+00, 5.33636411e-04, 5.54923217e-04, 5.56234519e-04,
               6.39780362e-04, 6.79149230e-04, 4.14071282e-03, 2.73531278e-03,
               3.25904091e-03, 6.09089335e-03, 1.13410751e-02, 1.42640869e-02,
               1.90253814e-02, 1.93536282e-02, 4.47578589e-02, 5.59020877e-02,
               5.99112153e-02, 8.49994063e-02, 1.13888780e-01, 1.13338246e-01,
               1.80640735e-01, 2.61239827e-01, 2.83645676e-01, 3.40445904e-01,
               7.29869934e-01, 8.99001042e-01, 1.08169870e+00, 1.19854563e+00,
               1.68845625e+00, 2.08283429e+00, 2.03420301e+00, 2.01311365e+00,
               2.20150585e+00, 2.24985399e+00, 2.44593962e+00, 2.81675674e+00,
               2.80394112e+00, 2.89433078e+00, 2.95882844e+00, 3.02594355e+00,
               3.12410090e+00, 3.12575125e+00, 3.11288114e+00, 3.12401012e+00,
               3.21309953e+00, 3.23907769e+00, 3.24680216e+00, 3.40730982e+00,
               3.38650265e+00, 3.29189559e+00, 3.31177732e+00, 3.37318254e+00,
               3.37318254e+00, 3.52988463e+00, 3.52988463e+00, 3.55195441e+00,
               3.71493343e+00]
    lrp00202 = [0.00000000e+00, 3.17891439e-08, 7.47044881e-07, 7.25189845e-06,
                3.59932582e-05, 4.92141644e-04, 5.61251243e-04, 7.37605492e-04,
                2.29669809e-03, 2.73376703e-03, 5.71191907e-03, 8.32918684e-03,
                1.15198692e-02, 1.84897741e-02, 4.64579324e-02, 2.89996445e-02,
                4.34618036e-02, 4.80223378e-02, 1.25045484e-01, 1.34180824e-01,
                1.91636368e-01, 2.32450515e-01, 2.41288817e-01, 2.86617217e-01,
                6.51063019e-01, 7.80621473e-01, 8.55508987e-01, 9.38575852e-01,
                1.68614666e+00, 2.02023020e+00, 2.06489179e+00, 2.10740642e+00,
                2.31341347e+00, 2.23748649e+00, 2.61430334e+00, 2.80913066e+00,
                2.75652015e+00, 2.86945453e+00, 2.96304283e+00, 3.05996752e+00,
                3.12650858e+00, 3.12937689e+00, 3.12748700e+00, 3.13323105e+00,
                3.13730244e+00, 3.17529564e+00, 3.23179410e+00, 3.41287631e+00,
                3.36203083e+00, 3.26470965e+00, 3.31388229e+00, 3.38273311e+00,
                3.47348417e+00, 3.52988463e+00, 3.52988463e+00, 3.55195441e+00,
                3.71493343e+00]
    lrp002 = [0.00000000e+00, 0.00000000e+00, 6.83466593e-07, 6.32206599e-06,
              3.31560771e-05, 4.89121675e-04, 5.63102961e-04, 6.31111860e-04,
              1.76150401e-03, 2.24514008e-03, 5.46277563e-03, 9.23942924e-03,
              1.40628298e-02, 1.83454951e-02, 4.61775959e-02, 2.76601811e-02,
              4.38651959e-02, 5.41268667e-02, 1.33390182e-01, 1.36544605e-01,
              2.15680393e-01, 2.25643375e-01, 2.87470726e-01, 3.11299330e-01,
              6.38632812e-01, 7.57829102e-01, 8.86676931e-01, 9.47591372e-01,
              1.36981378e+00, 2.02260426e+00, 2.05770438e+00, 2.26260741e+00,
              2.19410434e+00, 2.26587742e+00, 2.56977034e+00, 2.75843575e+00,
              2.75389339e+00, 2.87706217e+00, 2.97198880e+00, 3.02685217e+00,
              3.12694696e+00, 3.13057216e+00, 3.12292367e+00, 3.12619530e+00,
              3.12020715e+00, 3.16542163e+00, 3.31548420e+00, 3.40790061e+00,
              3.35559791e+00, 3.26470965e+00, 3.32132789e+00, 3.38273311e+00,
              3.37980940e+00, 3.52988463e+00, 3.52988463e+00, 3.55195441e+00,
              3.71493343e+00]

    random = [0.00000000e+00, 3.17891439e-07, 2.87729104e-03, 3.02552780e-03,
              3.19939852e-03, 5.52850962e-03, 1.83382054e-02, 1.93553547e-02,
              1.95349077e-02, 1.96838280e-02, 2.30122487e-02, 2.29943474e-02,
              3.43068769e-02, 5.16654025e-02, 5.24370939e-02, 5.04693220e-02,
              1.66488833e-01, 1.68820754e-01, 1.70465711e-01, 1.83869317e-01,
              1.97729564e-01, 2.43202978e-01, 2.60927276e-01, 3.10736990e-01,
              4.83839941e-01, 4.62710776e-01, 5.22312615e-01, 5.23060256e-01,
              8.57866615e-01, 1.24836267e+00, 1.51795260e+00, 1.60991675e+00,
              1.62556786e+00, 1.70989207e+00, 1.90854094e+00, 2.01148159e+00,
              2.08716923e+00, 2.16068107e+00, 2.16122442e+00, 2.20707686e+00,
              2.25016650e+00, 2.25013613e+00, 2.24608182e+00, 2.26458458e+00,
              2.28326272e+00, 2.28305771e+00, 2.29048947e+00, 2.38350404e+00,
              2.36266457e+00, 2.43699016e+00, 2.43605949e+00, 2.55495957e+00,
              2.73239944e+00, 2.87238565e+00, 2.96974197e+00, 2.96974031e+00,
              3.02231949e+00]
    random = ((np.asarray(random) * 30) / 20).tolist()
    print(random)
    fig, axs = plt.subplots()
    l = len(lrp)
    plt.plot(np.arange(0, l, 1), lrp0020, color="plum", linestyle="--",
             label=r"$\gamma = 0.002, \epsilon= 0.0$")
    plt.plot(np.arange(0, l, 1), lrp, color="mediumslateblue", linestyle="-.",
             label=r"$\gamma = 0.5, \epsilon= 0.2$")
    plt.plot(np.arange(0, l, 1), lrp1000, color="palevioletred", linestyle="--",
             label=r"$\gamma = 100, \epsilon= 0.0$")
    plt.plot(np.arange(0, l, 1), lrp10002, color="mediumseagreen", linestyle=":",
             label=r"$\gamma = 100, \epsilon= 0.2$")
    # plt.plot(np.arange(0,l, 1),lrp1000,color="cadetblue",linestyle="-.",
    #         label=r"$\gamma = 100, \epsilon= 0.0$")
    plt.plot(np.arange(0, l, 1), random, color="thistle", linestyle=":",
             label="random relevances")

    tick_max = 5 * round(float(l) / 5)
    ticks = np.arange(0, tick_max + 1, 5)
    axs.set_xticks(ticks, labels=ticks)

    plt.tight_layout()
    axs.spines['top'].set_visible(False)
    axs.spines['right'].set_visible(False)
    plt.legend()
    plt.savefig("plots/pru_multi_best.svg")
    plt.show()


def validation_avg_plot(relevances: list, l):
    avg = np.zeros((1, l))
    for i in relevances:
        tmp = np.zeros((1, l))
        tmp[0, 0:i[1]] = i[0]
        tmp[0, i[1]:] = i[0][-1]
        avg += tmp

    avg = avg / len(relevances)
    print("value: ", avg.sum())
    fig, axs = plt.subplots()
    axs.fill_between(np.arange(0, l, 1), avg.flatten(), color="mediumslateblue")
    tick_max = 5 * round(float(l) / 5)

    ticks = np.arange(0, tick_max + 1, 5)
    axs.set_xticks(ticks, labels=ticks)
    plt.tight_layout()
    axs.spines['top'].set_visible(False)
    axs.spines['right'].set_visible(False)

    # plt.savefig("plots/validation_pru_new_avg")
    plt.show()
    return avg.flatten()


def validation_plot(relevances: list, node, l):
    relevances = np.asarray(relevances).flatten()

    fig, axs = plt.subplots()
    axs.fill_between(np.arange(0, l, 1), relevances, color="mediumslateblue")
    tick_max = 5 * round(float(l) / 5)
    ticks = np.arange(0, tick_max + 1, 5)
    axs.set_xticks(ticks, labels=ticks)

    plt.tight_layout()
    axs.spines['top'].set_visible(False)
    axs.spines['right'].set_visible(False)

    plt.savefig("plots/validation_act_random" + str(node.numpy()))

    plt.show()


def restore_edges(adj, nodes, new_node, adj_new):
    adj = adj.to_dense()
    adj_new = adj_new.to_dense()

    for node in nodes:
        adj_new[node, new_node] = adj[node, new_node]
        adj_new[new_node, node] = adj[new_node, node]

    adj_new = torch_sparse.SparseTensor.from_dense(adj_new)
    return adj_new


def remove_edges(adj_new, nodes, new_node):
    adj_new = adj_new.to_dense()

    for node in nodes:
        adj_new[node, new_node] = 0
        adj_new[new_node, node] = 0

    adj_new = torch_sparse.SparseTensor.from_dense(adj_new)
    return adj_new


def clear_edges(adj, walks):
    adj_tmp = adj.to_dense()
    nodes = list(set(np.asarray(walks).flatten()))
    for node in nodes:
        for other in nodes:
            adj_tmp[node, other] = 0
            adj_tmp[other, node] = 0

    adj_tmp = torch_sparse.SparseTensor.from_dense(adj_tmp)
    return adj_tmp


def validation_list(walks: list, relevance: list, pruning: bool, activation_bool: bool):
    nodes = list(set(np.asarray(walks).flatten()))

    if activation_bool:
        R_g = 0
        activation = []
        for i in range(len(nodes)):
            R_max, old = (0, 0), -np.infty
            for node in nodes:
                s = np.asarray([relevance[x].sum() for x in range(len(walks)) if node in walks[x]])
                if (s.sum() + R_g) > old:
                    R_max = (node, s.sum())
                    old = s.sum() + R_g
            nodes.remove(R_max[0])
            activation.append(R_max[0])
            R_g += R_max[1]
        return activation

    elif pruning:
        R_g = np.asarray(relevance).sum().sum()
        res_pruning = []
        for i in range(len(nodes)):
            R_min, old = (0, 0), np.infty
            for node in nodes:
                s = np.asarray([relevance[x].sum() for x in range(len(walks)) if node not in walks[x]])
                if np.abs(s.sum() - R_g) < old:
                    R_min = (node, s.sum())
                    old = np.abs(s.sum() - R_g)

            nodes.remove(R_min[0])
            res_pruning.append(R_min[0])

    return res_pruning


def validation_random(walks, out):
    l = len(walks)
    rand = np.random.uniform(-out, out, [l])
    s = rand.sum()
    return (rand / s) * out.numpy()


def validation_results(gnn, mlp, x, adj, walks, relevances, src, tar, pruning=False, activaton=False,plot=False):
    node_list = validation_list(walks, relevances, pruning=pruning, activation_bool=activaton)
    if pruning:
        adj_tmp = adj
    else:
        adj_tmp = clear_edges(adj, walks)

    mid = gnn(x, adj_tmp)
    ref = mlp(mid[src], mid[tar]).detach().numpy().sum()
    graph = []
    predictions = []
    for node in node_list:
        graph.append(node)
        if pruning:
            adj_tmp = remove_edges(adj_tmp, graph, node)
        else:
            adj_tmp = restore_edges(adj, graph, node, adj_tmp)
        mid = gnn(x, adj_tmp)
        out = mlp(mid[src], mid[tar]).detach().numpy()

        if pruning:
            predictions.append(np.abs(ref - out.sum()))
        else:
            predictions.append(out.sum() - ref)

    if plot : validation_plot(predictions,src,len(node_list))
    return (predictions, len(node_list))
